Row Transposition Ciphers

In this type of transposition, the order of the alphabets is re-arranged to obtain the cipher-text.
1. The message is written out in rows of a fixed length, and then read out again column by column, and the columns are chosen in some scrambled order.
2. Width of the rows and the permutation of the columns are usually defined by a keyword.
3. For example, the word HACK is of length 4 (so the rows are of length 4), and the permutation is defined by the alphabetical order of the letters in the keyword. In this case, the order would be “3 1 2 4”.
4. Any spare spaces are filled with nulls or left blank or placed by a character (Example: _). In this case, it if filled with multiple 'z'.
5. Finally, the message is read off in columns, in the order specified by the keyword.


Example:
Encryption:
    Key: 
        3 4 2 1 5 6 7
    Plaintext: 
        i a m c r e a
        t i n g a g i
        t r e p o s i
        t o r y
    Ciphertext:
        mnercgpyairoitttraozegszaiiz
Decryption:
    Key: 
        3 4 2 1 5 6 7
    Ciphertext:
        mnercgpyairoitttraozegszaiiz
    Plaintext:
        iamcreatingagitrepositoryzzz


Arguments to command:
1. keyLength : Length of the key
2. key : the key used for encryption and decryption
3. inputfile : the name of the input file
4. outpufile : the name of the output file
5. enc/dec : enc while encryption, dec while decription


Running the repository code:
1. Open the terminal.
2. Add a plain text that you want to encrypt in "in" file.
3. Run the following command to do the encryption:
    python3 trans.py 7 3421567 in out enc
4. Notice the output is printed in the terminal as well as "out" file.
5. For decryption, run the following command in the same terminal:
    python3 trans.py 7 3421567 out in1 dec
6. Notice the decrypted plain text in the terminal with fillings of "z" at the end, as well as in the "in1" file.


Things to remember:
1. Use the same key for encryption and decryption
